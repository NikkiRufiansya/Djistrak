package jasapengriman;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.util.*;

public class Dijkstra {

    private static final Graph.Edge[] GRAPH = {
        new Graph.Edge("Malang", "Surabaya", 9),
        new Graph.Edge("Malang", "Lumajang", 8),
        new Graph.Edge("Malang", "Blitar", 10),
        new Graph.Edge("Surabaya", "Lumajang", 7),
        new Graph.Edge("Surabaya", "Banyuwangi", 9),
        new Graph.Edge("Lumajang", "Banyuwangi", 9),
        new Graph.Edge("Lumajang", "Blitar", 18),
        new Graph.Edge("Banyuwangi", "Jember", 6),
        new Graph.Edge("Jember", "Blitar", 16),};

    private static final String START = "Malang";
    private static final String END = "Jember";

    static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";
    static final String url = "jdbc:mysql://localhost:3306/pengiriman";
    static final String dbname = "root";
    static final String dbpass = "rahasia";

    public static void main(String[] args) {

        Scanner input = new Scanner(System.in);

        try {
            Connection con;
            Statement st = null;
            Class.forName("com.mysql.jdbc.Driver");
            System.out.print("Connect ...");
            System.out.println("...");

            con = (Connection) DriverManager.getConnection(url, dbname, dbpass);
            if (con != null) {
                System.out.println("Connect Successfully");
            } else {
                System.out.println("Connection Failed");
            }
//            System.out.print("Masukan Nama Kurir :");
//            String nama = input.next();
//            System.out.print("Masukan No Tlp :");
//            String nohp = input.next();
            // yg ini klw di hidupin dia masuk ke dalam database table kurir
            //String sql = "insert into kurir (nama,no_tlpn) values ('" + nama + "' , '" + nohp + "')";
//            st = (Statement) con.createStatement();
//            if (st.executeUpdate(sql) > 0) {
//                System.out.println("Data berhasil Tersimpan");
//            } else {
//                System.out.println("data gagal tersimpan");
//            }
//            boolean exit = true;
//            do {
//                System.out.println("Menu");
//                System.out.println("1.Lihat Data Kurir");
//                System.out.println("2.Lihat Peta");
//                System.out.println("3.Exit");
//                System.out.print("Masukan Pilihan :");
//                int pilih = input.nextInt();
//                switch (pilih) {
//                    case 1:
//                        try {
//                            st = (Statement) con.createStatement();
//                            String sql1 = "select * from kurir";
//                            System.out.println("Executing query....");
//                            ResultSet rs = st.executeQuery(sql1);
//
//                            while (rs.next()) {
////                                String id = rs.getString("id");
////                                nama = rs.getString("nama");
////                                nohp = rs.getString("no_tlpn");
////
////                                System.out.println("Id :" + id);
////                                System.out.println("Nama :" + nama);
////                                System.out.println("no hp :" + nohp);
////                                System.out.println("");
//                            }
//                            rs.close();
//                            st.close();
//                            con.close();
//                        } catch (Exception e) {
//                        }
//                        break;
//                    case 2:
//                        System.out.println("1. tambah kota");
//                        System.out.println("2. lihat kota");
//                        System.out.print("pilih :");
//                        int p = input.nextInt();
//                        if (p == 1) {
//                            try {
//                                System.out.print("Masukan kota awal :");
//                                String awal = input.next();
//                                System.out.print("Masukan Kota Tujuan :");
//                                String tujuan = input.next();
//                                System.out.print("Masukan Jarak :");
//                                int jarak = input.nextInt();
//                                Graph.Edge[] peta = {new Graph.Edge(awal, tujuan, jarak)};
//                                String sql1 = "insert into kota (v1,v2,dist) values ('" + awal + "' , '" + tujuan + "' , '" + jarak + "')";
//                                //kalau yang ini masuk ke dalam database tpi tidak masuk ke dalam graph
//                                String sql = "insert into kota (v1,v2,dist) values ('" + peta + "')";
//                                //klw yang ini masuk ke graph tpi tidak mau masuk ke dalam graph
//                                st = (Statement) con.createStatement();
//                                if (st.executeUpdate(sql) > 0) {
//                                    System.out.println("Data berhasil Tersimpan");
//                                } else {
//                                    System.out.println("data gagal tersimpan");
//                                }
//
//                            } catch (Exception e) {
//                            }
//
//                        } else if (p == 2) {
//                            try {
//                                String sql = "select v1,v2,dist from kota";
//                                st = (Statement) con.createStatement();
//                                ResultSet rs = st.executeQuery(sql);
//                                while (rs.next()) {
//                                    String v1 = rs.getString("");
//                                    
//                                }
//                                rs.close();
//                                st.close();
//                                con.close();
//                            } catch (Exception e) {
//                            }
//                        }
//                        break;
//                    case 3:
//                        
//                    case 4:
//                        exit = false;
//                        break;
//                    default:
//                        break;
//                }
//            } while (exit);

            System.out.print("Masukan kota awal :");
            String awal = input.next();
            System.out.print("Masukan Kota Tujuan :");
            String tujuan = input.next();
            System.out.print("Masukan Jarak :");
            int jarak = input.nextInt();
            Graph.Edge[] peta = {new Graph.Edge(awal, tujuan, jarak)};
            String sql1 = "insert into kota (v1,v2,dist) values ('" + awal + "' , '" + tujuan + "' , '" + jarak + "')";
            //kalau yang ini masuk ke dalam database tpi tidak masuk ke dalam graph
            String sql = "insert into kota (v1,v2,dist) values ('" + peta + "')";
            //klw yang ini masuk ke graph tpi tidak mau masuk ke dalam graph
//            st = (Statement) con.createStatement();
//            if (st.executeUpdate(sql1) > 0) {
//                System.out.println("Data berhasil Tersimpan");
//            } else {
//                System.out.println("data gagal tersimpan");
//            }

            st = (Statement) con.createStatement();
            String sql2 = "select * from kota";
            Graph g = new Graph(peta);
            ResultSet rs = st.executeQuery(sql2);
            if (rs.next()) {
                System.out.println("hitung jarak :");
                
                System.out.println("kota awal :");
                String a = input.next();
                g.dijkstra(a);
                System.out.println("kota akhir :");
                String b = input.next();
                g.printPath(b);
            }

        } catch (Exception e) {

        }

//        
//        Graph g = new Graph(GRAPH);
//        g.dijkstra(START);
//        g.printPath(END);
//        //g.printAllPaths();
    }
}

class Graph {

    private final Map<String, Vertex> graph; // mapping of vertex names to Vertex objects, built from a set of Edges

    /**
     * One edge of the graph (only used by Graph constructor)
     */
    public static class Edge {

        public final String v1, v2;
        public final int dist;

        public Edge(String v1, String v2, int dist) {
            this.v1 = v1;
            this.v2 = v2;
            this.dist = dist;
        }
    }

    /**
     * One vertex of the graph, complete with mappings to neighbouring vertices
     */
    public static class Vertex implements Comparable<Vertex> {

        public final String name;
        public int dist = Integer.MAX_VALUE; // MAX_VALUE assumed to be infinity
        public Vertex previous = null;
        public final Map<Vertex, Integer> neighbours = new HashMap<>();

        public Vertex(String name) {
            this.name = name;
        }

        private void printPath() {
            if (this == this.previous) {
                System.out.printf("%s", this.name);
            } else if (this.previous == null) {
                System.out.printf("%s(unreached)", this.name);
            } else {
                this.previous.printPath();
                System.out.printf(" -> %s(%d)", this.name, this.dist);
            }
        }

        public int compareTo(Vertex other) {
            if (dist == other.dist) {
                return name.compareTo(other.name);
            }

            return Integer.compare(dist, other.dist);
        }

        @Override
        public String toString() {
            return "(" + name + ", " + dist + ")";
        }
    }

    /**
     * Builds a graph from a set of edges
     */
    public Graph(Edge[] edges) {
        graph = new HashMap<>(edges.length);

        //one pass to find all vertices
        for (Edge e : edges) {
            if (!graph.containsKey(e.v1)) {
                graph.put(e.v1, new Vertex(e.v1));
            }
            if (!graph.containsKey(e.v2)) {
                graph.put(e.v2, new Vertex(e.v2));
            }
        }

        //another pass to set neighbouring vertices
        for (Edge e : edges) {
            graph.get(e.v1).neighbours.put(graph.get(e.v2), e.dist);
            //graph.get(e.v2).neighbours.put(graph.get(e.v1), e.dist); // also do this for an undirected graph
        }
    }

    /**
     * Runs dijkstra using a specified source vertex
     */
    public void dijkstra(String startName) {
        if (!graph.containsKey(startName)) {
            System.err.printf("Graph doesn't contain start vertex \"%s\"\n", startName);
            return;
        }
        final Vertex source = graph.get(startName);
        NavigableSet<Vertex> q = new TreeSet<>();

        // set-up vertices
        for (Vertex v : graph.values()) {
            v.previous = v == source ? source : null;
            v.dist = v == source ? 0 : Integer.MAX_VALUE;
            q.add(v);
        }

        dijkstra(q);
    }

    /**
     * Implementation of dijkstra's algorithm using a binary heap.
     */
    private void dijkstra(final NavigableSet<Vertex> q) {
        Vertex u, v;
        while (!q.isEmpty()) {

            u = q.pollFirst(); // vertex with shortest distance (first iteration will return source)
            if (u.dist == Integer.MAX_VALUE) {
                break; // we can ignore u (and any other remaining vertices) since they are unreachable
            }
            //look at distances to each neighbour
            for (Map.Entry<Vertex, Integer> a : u.neighbours.entrySet()) {
                v = a.getKey(); //the neighbour in this iteration

                final int alternateDist = u.dist + a.getValue();
                if (alternateDist < v.dist) { // shorter path to neighbour found
                    q.remove(v);
                    v.dist = alternateDist;
                    v.previous = u;
                    q.add(v);
                }
            }
        }
    }

    /**
     * Prints a path from the source to the specified vertex
     */
    public void printPath(String endName) {
        if (!graph.containsKey(endName)) {
            System.err.printf("Graph doesn't contain end vertex \"%s\"\n", endName);
            return;
        }

        graph.get(endName).printPath();
        System.out.println();
    }

    /**
     * Prints the path from the source to every vertex (output order is not
     * guaranteed)
     */
    public void printAllPaths() {
        for (Vertex v : graph.values()) {
            v.printPath();
            System.out.println();
        }
    }
}
